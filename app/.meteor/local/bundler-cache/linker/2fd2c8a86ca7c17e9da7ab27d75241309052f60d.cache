[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar _ = Package.underscore._;\nvar ActiveRoute = Package['zimme:active-route'].ActiveRoute;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar __coffeescriptShare, FlowRouterHelpers;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////\n//                                                                                   //\n// packages/arillo_flow-router-helpers/client/helpers.coffee.js                      //\n//                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////\n                                                                                     //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar currentRouteName,                                                                //\n    currentRouteOption,                                                              //\n    func,                                                                            //\n    helpers,                                                                         //\n    isSubReady,                                                                      //\n    name,                                                                            //\n    param,                                                                           //\n    pathFor,                                                                         //\n    queryParam,                                                                      //\n    subsReady,                                                                       //\n    urlFor,                                                                          //\n    slice = [].slice,                                                                //\n    hasProp = {}.hasOwnProperty;                                                     //\n                                                                                     //\nsubsReady = function () {                                                            //\n  var subs;                                                                          //\n  subs = 1 <= arguments.length ? slice.call(arguments, 0) : [];                      //\n                                                                                     //\n  if (subs.length === 1) {                                                           //\n    return FlowRouter.subsReady();                                                   //\n  }                                                                                  //\n                                                                                     //\n  subs = subs.slice(0, subs.length - 1);                                             //\n  return _.reduce(subs, function (memo, sub) {                                       //\n    return memo && FlowRouter.subsReady(sub);                                        //\n  }, true);                                                                          //\n};                                                                                   //\n                                                                                     //\npathFor = function (path, view) {                                                    //\n  var hashBang, query, ref;                                                          //\n                                                                                     //\n  if (view == null) {                                                                //\n    view = {                                                                         //\n      hash: {}                                                                       //\n    };                                                                               //\n  }                                                                                  //\n                                                                                     //\n  if (!path) {                                                                       //\n    throw new Error('no path defined');                                              //\n  }                                                                                  //\n                                                                                     //\n  if (!view.hash) {                                                                  //\n    view = {                                                                         //\n      hash: view                                                                     //\n    };                                                                               //\n  }                                                                                  //\n                                                                                     //\n  if (((ref = path.hash) != null ? ref.route : void 0) != null) {                    //\n    view = path;                                                                     //\n    path = view.hash.route;                                                          //\n    delete view.hash.route;                                                          //\n  }                                                                                  //\n                                                                                     //\n  query = view.hash.query ? FlowRouter._qs.parse(view.hash.query) : {};              //\n  hashBang = view.hash.hash ? view.hash.hash : '';                                   //\n  return FlowRouter.path(path, view.hash, query) + (hashBang ? \"#\" + hashBang : '');\n};                                                                                   //\n                                                                                     //\nurlFor = function (path, view) {                                                     //\n  var relativePath;                                                                  //\n  relativePath = pathFor(path, view);                                                //\n  return Meteor.absoluteUrl(relativePath.substr(1));                                 //\n};                                                                                   //\n                                                                                     //\nparam = function (name) {                                                            //\n  return FlowRouter.getParam(name);                                                  //\n};                                                                                   //\n                                                                                     //\nqueryParam = function (key) {                                                        //\n  return FlowRouter.getQueryParam(key);                                              //\n};                                                                                   //\n                                                                                     //\ncurrentRouteName = function () {                                                     //\n  return FlowRouter.getRouteName();                                                  //\n};                                                                                   //\n                                                                                     //\ncurrentRouteOption = function (optionName) {                                         //\n  return FlowRouter.current().route.options[optionName];                             //\n};                                                                                   //\n                                                                                     //\nisSubReady = function (sub) {                                                        //\n  if (sub) {                                                                         //\n    return FlowRouter.subsReady(sub);                                                //\n  }                                                                                  //\n                                                                                     //\n  return FlowRouter.subsReady();                                                     //\n};                                                                                   //\n                                                                                     //\nhelpers = {                                                                          //\n  subsReady: subsReady,                                                              //\n  pathFor: pathFor,                                                                  //\n  urlFor: urlFor,                                                                    //\n  param: param,                                                                      //\n  queryParam: queryParam,                                                            //\n  currentRouteName: currentRouteName,                                                //\n  isSubReady: isSubReady,                                                            //\n  currentRouteOption: currentRouteOption                                             //\n};                                                                                   //\n                                                                                     //\nif (Meteor.isClient) {                                                               //\n  for (name in meteorBabelHelpers.sanitizeForInObject(helpers)) {                    //\n    if (!hasProp.call(helpers, name)) continue;                                      //\n    func = helpers[name];                                                            //\n    Template.registerHelper(name, func);                                             //\n  }                                                                                  //\n}                                                                                    //\n                                                                                     //\nif (Meteor.isServer) {                                                               //\n  FlowRouterHelpers = {                                                              //\n    pathFor: pathFor,                                                                //\n    urlFor: urlFor                                                                   //\n  };                                                                                 //\n}                                                                                    //\n///////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['arillo:flow-router-helpers'] = {}, {\n  FlowRouterHelpers: FlowRouterHelpers\n});\n\n})();\n","servePath":"/packages/arillo_flow-router-helpers.js"}]