{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/lib/semantic-ui/definitions/behaviors/colorize.js","filenameRelative":"/client/lib/semantic-ui/definitions/behaviors/colorize.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/lib/semantic-ui/definitions/behaviors/colorize.js.map","sourceFileName":"/client/lib/semantic-ui/definitions/behaviors/colorize.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"colorize"},"ignored":false,"code":"/*\n  DO NOT MODIFY - This file has been generated and will be regenerated\n  Semantic UI v2.2.1\n*/ /*!\n    * # Semantic UI - Colorize\n    * http://github.com/semantic-org/semantic-ui/\n    *\n    *\n    * Released under the MIT license\n    * http://opensource.org/licenses/MIT\n    *\n    */;\n\n(function ($, window, document, undefined) {\n  \"use strict\";\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.colorize = function (parameters) {\n    var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.colorize.settings, parameters) : $.extend({}, $.fn.colorize.settings),\n        // hoist arguments\n    moduleArguments = arguments || false;\n    $(this).each(function (instanceIndex) {\n      var $module = $(this),\n          mainCanvas = $('<canvas />')[0],\n          imageCanvas = $('<canvas />')[0],\n          overlayCanvas = $('<canvas />')[0],\n          backgroundImage = new Image(),\n          // defs\n      mainContext,\n          imageContext,\n          overlayContext,\n          image,\n          imageName,\n          width,\n          height,\n          // shortcuts\n      colors = settings.colors,\n          paths = settings.paths,\n          namespace = settings.namespace,\n          error = settings.error,\n          // boilerplate\n      instance = $module.data('module-' + namespace),\n          module;\n      module = {\n        checkPreconditions: function () {\n          module.debug('Checking pre-conditions');\n\n          if (!$.isPlainObject(colors) || $.isEmptyObject(colors)) {\n            module.error(error.undefinedColors);\n            return false;\n          }\n\n          return true;\n        },\n        async: function (callback) {\n          if (settings.async) {\n            setTimeout(callback, 0);\n          } else {\n            callback();\n          }\n        },\n        getMetadata: function () {\n          module.debug('Grabbing metadata');\n          image = $module.data('image') || settings.image || undefined;\n          imageName = $module.data('name') || settings.name || instanceIndex;\n          width = settings.width || $module.width();\n          height = settings.height || $module.height();\n\n          if (width === 0 || height === 0) {\n            module.error(error.undefinedSize);\n          }\n        },\n        initialize: function () {\n          module.debug('Initializing with colors', colors);\n\n          if (module.checkPreconditions()) {\n            module.async(function () {\n              module.getMetadata();\n              module.canvas.create();\n              module.draw.image(function () {\n                module.draw.colors();\n                module.canvas.merge();\n              });\n              $module.data('module-' + namespace, module);\n            });\n          }\n        },\n        redraw: function () {\n          module.debug('Redrawing image');\n          module.async(function () {\n            module.canvas.clear();\n            module.draw.colors();\n            module.canvas.merge();\n          });\n        },\n        change: {\n          color: function (colorName, color) {\n            module.debug('Changing color', colorName);\n\n            if (colors[colorName] === undefined) {\n              module.error(error.missingColor);\n              return false;\n            }\n\n            colors[colorName] = color;\n            module.redraw();\n          }\n        },\n        canvas: {\n          create: function () {\n            module.debug('Creating canvases');\n            mainCanvas.width = width;\n            mainCanvas.height = height;\n            imageCanvas.width = width;\n            imageCanvas.height = height;\n            overlayCanvas.width = width;\n            overlayCanvas.height = height;\n            mainContext = mainCanvas.getContext('2d');\n            imageContext = imageCanvas.getContext('2d');\n            overlayContext = overlayCanvas.getContext('2d');\n            $module.append(mainCanvas);\n            mainContext = $module.children('canvas')[0].getContext('2d');\n          },\n          clear: function (context) {\n            module.debug('Clearing canvas');\n            overlayContext.fillStyle = '#FFFFFF';\n            overlayContext.fillRect(0, 0, width, height);\n          },\n          merge: function () {\n            if (!$.isFunction(mainContext.blendOnto)) {\n              module.error(error.missingPlugin);\n              return;\n            }\n\n            mainContext.putImageData(imageContext.getImageData(0, 0, width, height), 0, 0);\n            overlayContext.blendOnto(mainContext, 'multiply');\n          }\n        },\n        draw: {\n          image: function (callback) {\n            module.debug('Drawing image');\n\n            callback = callback || function () {};\n\n            if (image) {\n              backgroundImage.src = image;\n\n              backgroundImage.onload = function () {\n                imageContext.drawImage(backgroundImage, 0, 0);\n                callback();\n              };\n            } else {\n              module.error(error.noImage);\n              callback();\n            }\n          },\n          colors: function () {\n            module.debug('Drawing color overlays', colors);\n            $.each(colors, function (colorName, color) {\n              settings.onDraw(overlayContext, imageName, colorName, color);\n            });\n          }\n        },\n        debug: function (message, variableName) {\n          if (settings.debug) {\n            if (variableName !== undefined) {\n              console.info(settings.name + ': ' + message, variableName);\n            } else {\n              console.info(settings.name + ': ' + message);\n            }\n          }\n        },\n        error: function (errorMessage) {\n          console.warn(settings.name + ': ' + errorMessage);\n        },\n        invoke: function (methodName, context, methodArguments) {\n          var method;\n          methodArguments = methodArguments || Array.prototype.slice.call(arguments, 2);\n\n          if (typeof methodName == 'string' && instance !== undefined) {\n            methodName = methodName.split('.');\n            $.each(methodName, function (index, name) {\n              if ($.isPlainObject(instance[name])) {\n                instance = instance[name];\n                return true;\n              } else if ($.isFunction(instance[name])) {\n                method = instance[name];\n                return true;\n              }\n\n              module.error(settings.error.method);\n              return false;\n            });\n          }\n\n          return $.isFunction(method) ? method.apply(context, methodArguments) : false;\n        }\n      };\n\n      if (instance !== undefined && moduleArguments) {\n        // simpler than invoke realizing to invoke itself (and losing scope due prototype.call()\n        if (moduleArguments[0] == 'invoke') {\n          moduleArguments = Array.prototype.slice.call(moduleArguments, 1);\n        }\n\n        return module.invoke(moduleArguments[0], this, Array.prototype.slice.call(moduleArguments, 1));\n      } // initializing\n\n\n      module.initialize();\n    });\n    return this;\n  };\n\n  $.fn.colorize.settings = {\n    name: 'Image Colorizer',\n    debug: true,\n    namespace: 'colorize',\n    onDraw: function (overlayContext, imageName, colorName, color) {},\n    // whether to block execution while updating canvas\n    async: true,\n    // object containing names and default values of color regions\n    colors: {},\n    metadata: {\n      image: 'image',\n      name: 'name'\n    },\n    error: {\n      noImage: 'No tracing image specified',\n      undefinedColors: 'No default colors specified.',\n      missingColor: 'Attempted to change color that does not exist',\n      missingPlugin: 'Blend onto plug-in must be included',\n      undefinedHeight: 'The width or height of image canvas could not be automatically determined. Please specify a height.'\n    }\n  };\n})(jQuery, window, document);","ast":null,"map":{"version":3,"sources":["/client/lib/semantic-ui/definitions/behaviors/colorize.js"],"names":["$","window","document","undefined","Math","self","Function","fn","colorize","parameters","settings","isPlainObject","extend","moduleArguments","arguments","each","instanceIndex","$module","mainCanvas","imageCanvas","overlayCanvas","backgroundImage","Image","mainContext","imageContext","overlayContext","image","imageName","width","height","colors","paths","namespace","error","instance","data","module","checkPreconditions","debug","isEmptyObject","undefinedColors","async","callback","setTimeout","getMetadata","name","undefinedSize","initialize","canvas","create","draw","merge","redraw","clear","change","color","colorName","missingColor","getContext","append","children","context","fillStyle","fillRect","isFunction","blendOnto","missingPlugin","putImageData","getImageData","src","onload","drawImage","noImage","onDraw","message","variableName","console","info","errorMessage","warn","invoke","methodName","methodArguments","method","Array","prototype","slice","call","split","index","apply","metadata","undefinedHeight","jQuery"],"mappings":"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","file":"/client/lib/semantic-ui/definitions/behaviors/colorize.js.map","sourcesContent":["/*\n  DO NOT MODIFY - This file has been generated and will be regenerated\n  Semantic UI v2.2.1\n*/\n/*!\n * # Semantic UI - Colorize\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n\n;(function ($, window, document, undefined) {\n\n\"use strict\";\n\nwindow = (typeof window != 'undefined' && window.Math == Math)\n  ? window\n  : (typeof self != 'undefined' && self.Math == Math)\n    ? self\n    : Function('return this')()\n;\n\n$.fn.colorize = function(parameters) {\n  var\n    settings          = ( $.isPlainObject(parameters) )\n      ? $.extend(true, {}, $.fn.colorize.settings, parameters)\n      : $.extend({}, $.fn.colorize.settings),\n    // hoist arguments\n    moduleArguments = arguments || false\n  ;\n  $(this)\n    .each(function(instanceIndex) {\n\n      var\n        $module         = $(this),\n\n        mainCanvas      = $('<canvas />')[0],\n        imageCanvas     = $('<canvas />')[0],\n        overlayCanvas   = $('<canvas />')[0],\n\n        backgroundImage = new Image(),\n\n        // defs\n        mainContext,\n        imageContext,\n        overlayContext,\n\n        image,\n        imageName,\n\n        width,\n        height,\n\n        // shortcuts\n        colors    = settings.colors,\n        paths     = settings.paths,\n        namespace = settings.namespace,\n        error     = settings.error,\n\n        // boilerplate\n        instance   = $module.data('module-' + namespace),\n        module\n      ;\n\n      module = {\n\n        checkPreconditions: function() {\n          module.debug('Checking pre-conditions');\n\n          if( !$.isPlainObject(colors) || $.isEmptyObject(colors) ) {\n            module.error(error.undefinedColors);\n            return false;\n          }\n          return true;\n        },\n\n        async: function(callback) {\n          if(settings.async) {\n            setTimeout(callback, 0);\n          }\n          else {\n            callback();\n          }\n        },\n\n        getMetadata: function() {\n          module.debug('Grabbing metadata');\n          image     = $module.data('image') || settings.image || undefined;\n          imageName = $module.data('name')  || settings.name  || instanceIndex;\n          width     = settings.width        || $module.width();\n          height    = settings.height       || $module.height();\n          if(width === 0 || height === 0) {\n            module.error(error.undefinedSize);\n          }\n        },\n\n        initialize: function() {\n          module.debug('Initializing with colors', colors);\n          if( module.checkPreconditions() ) {\n\n            module.async(function() {\n              module.getMetadata();\n              module.canvas.create();\n\n              module.draw.image(function() {\n                module.draw.colors();\n                module.canvas.merge();\n              });\n              $module\n                .data('module-' + namespace, module)\n              ;\n            });\n          }\n        },\n\n        redraw: function() {\n          module.debug('Redrawing image');\n          module.async(function() {\n            module.canvas.clear();\n            module.draw.colors();\n            module.canvas.merge();\n          });\n        },\n\n        change: {\n          color: function(colorName, color) {\n            module.debug('Changing color', colorName);\n            if(colors[colorName] === undefined) {\n              module.error(error.missingColor);\n              return false;\n            }\n            colors[colorName] = color;\n            module.redraw();\n          }\n        },\n\n        canvas: {\n          create: function() {\n            module.debug('Creating canvases');\n\n            mainCanvas.width     = width;\n            mainCanvas.height    = height;\n            imageCanvas.width    = width;\n            imageCanvas.height   = height;\n            overlayCanvas.width  = width;\n            overlayCanvas.height = height;\n\n            mainContext    = mainCanvas.getContext('2d');\n            imageContext   = imageCanvas.getContext('2d');\n            overlayContext = overlayCanvas.getContext('2d');\n\n            $module\n              .append( mainCanvas )\n            ;\n            mainContext    = $module.children('canvas')[0].getContext('2d');\n          },\n          clear: function(context) {\n            module.debug('Clearing canvas');\n            overlayContext.fillStyle = '#FFFFFF';\n            overlayContext.fillRect(0, 0, width, height);\n          },\n          merge: function() {\n            if( !$.isFunction(mainContext.blendOnto) ) {\n              module.error(error.missingPlugin);\n              return;\n            }\n            mainContext.putImageData( imageContext.getImageData(0, 0, width, height), 0, 0);\n            overlayContext.blendOnto(mainContext, 'multiply');\n          }\n        },\n\n        draw: {\n\n          image: function(callback) {\n            module.debug('Drawing image');\n            callback = callback || function(){};\n            if(image) {\n              backgroundImage.src    = image;\n              backgroundImage.onload = function() {\n                imageContext.drawImage(backgroundImage, 0, 0);\n                callback();\n              };\n            }\n            else {\n              module.error(error.noImage);\n              callback();\n            }\n          },\n\n          colors: function() {\n            module.debug('Drawing color overlays', colors);\n            $.each(colors, function(colorName, color) {\n              settings.onDraw(overlayContext, imageName, colorName, color);\n            });\n          }\n\n        },\n\n        debug: function(message, variableName) {\n          if(settings.debug) {\n            if(variableName !== undefined) {\n              console.info(settings.name + ': ' + message, variableName);\n            }\n            else {\n              console.info(settings.name + ': ' + message);\n            }\n          }\n        },\n        error: function(errorMessage) {\n          console.warn(settings.name + ': ' + errorMessage);\n        },\n        invoke: function(methodName, context, methodArguments) {\n          var\n            method\n          ;\n          methodArguments = methodArguments || Array.prototype.slice.call( arguments, 2 );\n\n          if(typeof methodName == 'string' && instance !== undefined) {\n            methodName = methodName.split('.');\n            $.each(methodName, function(index, name) {\n              if( $.isPlainObject( instance[name] ) ) {\n                instance = instance[name];\n                return true;\n              }\n              else if( $.isFunction( instance[name] ) ) {\n                method = instance[name];\n                return true;\n              }\n              module.error(settings.error.method);\n              return false;\n            });\n          }\n          return ( $.isFunction( method ) )\n            ? method.apply(context, methodArguments)\n            : false\n          ;\n        }\n\n      };\n      if(instance !== undefined && moduleArguments) {\n        // simpler than invoke realizing to invoke itself (and losing scope due prototype.call()\n        if(moduleArguments[0] == 'invoke') {\n          moduleArguments = Array.prototype.slice.call( moduleArguments, 1 );\n        }\n        return module.invoke(moduleArguments[0], this, Array.prototype.slice.call( moduleArguments, 1 ) );\n      }\n      // initializing\n      module.initialize();\n    })\n  ;\n  return this;\n};\n\n$.fn.colorize.settings = {\n  name      : 'Image Colorizer',\n  debug     : true,\n  namespace : 'colorize',\n\n  onDraw    : function(overlayContext, imageName, colorName, color) {},\n\n  // whether to block execution while updating canvas\n  async     : true,\n  // object containing names and default values of color regions\n  colors    : {},\n\n  metadata: {\n    image : 'image',\n    name  : 'name'\n  },\n\n  error: {\n    noImage         : 'No tracing image specified',\n    undefinedColors : 'No default colors specified.',\n    missingColor    : 'Attempted to change color that does not exist',\n    missingPlugin   : 'Blend onto plug-in must be included',\n    undefinedHeight : 'The width or height of image canvas could not be automatically determined. Please specify a height.'\n  }\n\n};\n\n})( jQuery, window, document );\n"]},"hash":"38e7eb11248fabb5ed4bd5910ba0b9de6a0a0139"}
