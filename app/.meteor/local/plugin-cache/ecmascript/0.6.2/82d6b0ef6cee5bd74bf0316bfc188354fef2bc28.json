{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/fabienb4:autoform-semantic-ui/templates/semantic-ui/inputTypes/basic-select/basic-select.js","filenameRelative":"/packages/fabienb4:autoform-semantic-ui/templates/semantic-ui/inputTypes/basic-select/basic-select.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/fabienb4:autoform-semantic-ui/templates/semantic-ui/inputTypes/basic-select/basic-select.js.map","sourceFileName":"/packages/fabienb4:autoform-semantic-ui/templates/semantic-ui/inputTypes/basic-select/basic-select.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"basic-select"},"ignored":false,"code":"AutoForm.addInputType(\"basic-select\", {\n  template: \"afBasicSelect\",\n  valueOut: function () {\n    return this.val();\n  },\n  valueConverters: {\n    stringArray: AutoForm.valueConverters.stringToStringArray,\n    number: AutoForm.valueConverters.stringToNumber,\n    numberArray: AutoForm.valueConverters.stringToNumberArray,\n    boolean: AutoForm.valueConverters.stringToBoolean,\n    booleanArray: AutoForm.valueConverters.stringToBooleanArray,\n    date: AutoForm.valueConverters.stringToDate,\n    dateArray: AutoForm.valueConverters.stringToDateArray\n  },\n  contextAdjust: function (context) {\n    // can fix issues with some browsers selecting the firstOption instead of the selected option\n    context.atts.autocomplete = \"off\";\n\n    var itemAtts = _.omit(context.atts, \"firstOption\");\n\n    var firstOption = context.atts.firstOption; // build items list\n\n    context.items = []; // If a firstOption was provided, add that to the items list first\n\n    if (firstOption !== false) {\n      context.items.push({\n        name: context.name,\n        label: typeof firstOption === \"string\" ? firstOption : \"(Select One)\",\n        value: \"\",\n        // _id must be included because it is a special property that\n        // #each uses to track unique list items when adding and removing them\n        // See https://github.com/meteor/meteor/issues/2174\n        //\n        // Setting this to an empty string caused problems if option with value\n        // 1 was in the options list because Spacebars evaluates \"\" to 1 and\n        // considers that a duplicate.\n        // See https://github.com/aldeed/meteor-autoform/issues/656\n        _id: \"AUTOFORM_EMPTY_FIRST_OPTION\",\n        selected: false,\n        atts: itemAtts\n      });\n    }\n\n    var buildOption = function (option) {\n      return {\n        name: context.name,\n        label: option.label,\n        value: option.value,\n        htmlAtts: _.omit(option, \"label\", \"value\"),\n        // _id must be included because it is a special property that\n        // #each uses to track unique list items when adding and removing them\n        // See https://github.com/meteor/meteor/issues/2174\n        //\n        // The toString() is necessary because otherwise Spacebars evaluates\n        // any string to 1 if the other values are numbers, and then considers\n        // that a duplicate.\n        // See https://github.com/aldeed/meteor-autoform/issues/656\n        _id: option.value.toString(),\n        selected: option.value === context.value,\n        atts: itemAtts\n      };\n    }; // Add all defined options\n\n\n    _.each(context.selectOptions, function (option) {\n      if (option.optgroup) {\n        var subOptions = _.map(option.items, buildOption);\n\n        context.items.push({\n          optgroup: option.optgroup,\n          items: subOptions\n        });\n      } else {\n        context.items.push(buildOption(option));\n      }\n    });\n\n    return context;\n  }\n});","ast":null,"map":{"version":3,"sources":["/packages/fabienb4:autoform-semantic-ui/templates/semantic-ui/inputTypes/basic-select/basic-select.js"],"names":["AutoForm","addInputType","template","valueOut","val","valueConverters","stringArray","stringToStringArray","number","stringToNumber","numberArray","stringToNumberArray","boolean","stringToBoolean","booleanArray","stringToBooleanArray","date","stringToDate","dateArray","stringToDateArray","contextAdjust","context","atts","autocomplete","itemAtts","_","omit","firstOption","items","push","name","label","value","_id","selected","buildOption","option","htmlAtts","toString","each","selectOptions","optgroup","subOptions","map"],"mappings":"AAAAA,SAASC,YAAT,CAAsB,cAAtB,EAAsC;AACpCC,YAAU,eAD0B;AAErCC,UAFqC,cAE1B;AACV,WAAO,KAAKC,GAAL,EAAP;AACA,GAJoC;AAKrCC,mBAAiB;AACdC,iBAAcN,SAASK,eAAT,CAAyBE,mBADzB;AAEdC,YAAcR,SAASK,eAAT,CAAyBI,cAFzB;AAGdC,iBAAcV,SAASK,eAAT,CAAyBM,mBAHzB;AAIdC,aAAcZ,SAASK,eAAT,CAAyBQ,eAJzB;AAKdC,kBAAcd,SAASK,eAAT,CAAyBU,oBALzB;AAMdC,UAAchB,SAASK,eAAT,CAAyBY,YANzB;AAOdC,eAAclB,SAASK,eAAT,CAAyBc;AAPzB,GALoB;AAcpCC,eAdoC,YActBC,OAdsB,EAcb;AACrB;AACAA,YAAQC,IAAR,CAAaC,YAAb,GAA4B,KAA5B;;AAEA,QAAIC,WAAcC,EAAEC,IAAF,CAAOL,QAAQC,IAAf,EAAqB,aAArB,CAAlB;;AACA,QAAIK,cAAcN,QAAQC,IAAR,CAAaK,WAA/B,CALqB,CAOrB;;AACAN,YAAQO,KAAR,GAAgB,EAAhB,CARqB,CAUrB;;AACA,QAAID,gBAAgB,KAApB,EAA2B;AACzBN,cAAQO,KAAR,CAAcC,IAAd,CAAmB;AACjBC,cAAOT,QAAQS,IADE;AAEjBC,eAAQ,OAAOJ,WAAP,KAAuB,QAAvB,GAAkCA,WAAlC,GAAgD,cAFvC;AAGjBK,eAAO,EAHU;AAIjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,aAAU,6BAZO;AAajBC,kBAAU,KAbO;AAcjBZ,cAAUE;AAdO,OAAnB;AAgBD;;AAED,QAAIW,cAAc;AAAA,aAAW;AAC3BL,cAAUT,QAAQS,IADS;AAE3BC,eAAUK,OAAOL,KAFU;AAG3BC,eAAUI,OAAOJ,KAHU;AAI3BK,kBAAUZ,EAAEC,IAAF,CAAOU,MAAP,EAAe,OAAf,EAAwB,OAAxB,CAJiB;AAK3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,aAAUG,OAAOJ,KAAP,CAAaM,QAAb,EAbiB;AAc3BJ,kBAAWE,OAAOJ,KAAP,KAAiBX,QAAQW,KAdT;AAe3BV,cAAUE;AAfiB,OAAX;AAAA,KAAlB,CA9BqB,CAgDrB;;;AACAC,MAAEc,IAAF,CAAOlB,QAAQmB,aAAf,EAA8B,kBAAU;AACtC,UAAIJ,OAAOK,QAAX,EAAqB;AACnB,YAAIC,aAAajB,EAAEkB,GAAF,CAAMP,OAAOR,KAAb,EAAoBO,WAApB,CAAjB;;AAEAd,gBAAQO,KAAR,CAAcC,IAAd,CAAmB;AACjBY,oBAAUL,OAAOK,QADA;AAEjBb,iBAAUc;AAFO,SAAnB;AAID,OAPD,MAOO;AACLrB,gBAAQO,KAAR,CAAcC,IAAd,CAAmBM,YAAYC,MAAZ,CAAnB;AACD;AACF,KAXD;;AAaA,WAAOf,OAAP;AACD;AA7EmC,CAAtC","file":"/packages/fabienb4:autoform-semantic-ui/templates/semantic-ui/inputTypes/basic-select/basic-select.js.map","sourcesContent":["AutoForm.addInputType(\"basic-select\", {\n  template: \"afBasicSelect\",\n\tvalueOut() {\n\t\treturn this.val();\n\t},\n\tvalueConverters: {\n    stringArray:  AutoForm.valueConverters.stringToStringArray,\n    number:       AutoForm.valueConverters.stringToNumber,\n    numberArray:  AutoForm.valueConverters.stringToNumberArray,\n    boolean:      AutoForm.valueConverters.stringToBoolean,\n    booleanArray: AutoForm.valueConverters.stringToBooleanArray,\n    date:         AutoForm.valueConverters.stringToDate,\n    dateArray:    AutoForm.valueConverters.stringToDateArray\n\t},\n  contextAdjust(context) {\n    // can fix issues with some browsers selecting the firstOption instead of the selected option\n    context.atts.autocomplete = \"off\";\n\n    let itemAtts    = _.omit(context.atts, \"firstOption\");\n    let firstOption = context.atts.firstOption;\n\n    // build items list\n    context.items = [];\n\n    // If a firstOption was provided, add that to the items list first\n    if (firstOption !== false) {\n      context.items.push({\n        name:  context.name,\n        label: (typeof firstOption === \"string\" ? firstOption : \"(Select One)\"),\n        value: \"\",\n        // _id must be included because it is a special property that\n        // #each uses to track unique list items when adding and removing them\n        // See https://github.com/meteor/meteor/issues/2174\n        //\n        // Setting this to an empty string caused problems if option with value\n        // 1 was in the options list because Spacebars evaluates \"\" to 1 and\n        // considers that a duplicate.\n        // See https://github.com/aldeed/meteor-autoform/issues/656\n        _id:      \"AUTOFORM_EMPTY_FIRST_OPTION\",\n        selected: false,\n        atts:     itemAtts\n      });\n    }\n\n    let buildOption = option => ({\n      name:     context.name,\n      label:    option.label,\n      value:    option.value,\n      htmlAtts: _.omit(option, \"label\", \"value\"),\n      // _id must be included because it is a special property that\n      // #each uses to track unique list items when adding and removing them\n      // See https://github.com/meteor/meteor/issues/2174\n      //\n      // The toString() is necessary because otherwise Spacebars evaluates\n      // any string to 1 if the other values are numbers, and then considers\n      // that a duplicate.\n      // See https://github.com/aldeed/meteor-autoform/issues/656\n      _id:      option.value.toString(),\n      selected: (option.value === context.value),\n      atts:     itemAtts\n    });\n\n    // Add all defined options\n    _.each(context.selectOptions, option => {\n      if (option.optgroup) {\n        let subOptions = _.map(option.items, buildOption);\n\n        context.items.push({\n          optgroup: option.optgroup,\n          items:    subOptions\n        });\n      } else {\n        context.items.push(buildOption(option));\n      }\n    });\n\n    return context;\n  }\n});\n"]},"hash":"82d6b0ef6cee5bd74bf0316bfc188354fef2bc28"}
